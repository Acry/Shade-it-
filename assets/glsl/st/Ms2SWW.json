[{"ver":"0.1","info":{"id":"Ms2SWW","date":"1357121825","viewed":10895,"name":"Deform - square tunnel","username":"iq","description":"A 2D square tunnel. If done naively, the tunnel will have a discontinuity in the left side of the screen where the atan() function branches. Taking derivatives on the right where there's no branch and applying them on the left side fixes the problem.","likes":26,"published":3,"flags":0,"tags":[]},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"\/media\/a\/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"\/media\/ap\/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Compare naive implementation of texture fetching to gradient-discontinuity-aware\n\/\/ fetching. The naive approach produces a line of discontinuity in the left side\n\/\/ of the screen, if the viewport resolution is an odd number. With this technique\n\/\/ the artifact is gone.\n\/\/\n\/\/ More info: http:\/\/www.iquilezles.org\/www\/articles\/tunnel\/tunnel.htm\n\n\n\/\/ #define NAIVE_IMPLEMENTATION\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ normalized coordinates (-1 to 1 vertically)\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)\/iResolution.y;\n\n    \/\/ angle of each pixel to the center of the screen\n    float a = atan(p.y,p.x);\n\n    #if 0\n    \/\/ cylindrical tunnel\n    float r = length(p);\n    #else\n    \/\/ squareish tunnel\n    float r = pow( pow(p.x*p.x,4.0) + pow(p.y*p.y,4.0), 1.0\/8.0 );\n    #endif\n    \n    \/\/ index texture by (animated inverse) radious and angle\n    vec2 uv = vec2( 0.3\/r + 0.2*iTime, a\/3.1415927 );\n\n    #ifdef NAIVE_IMPLEMENTATION\n        \/\/ naive fecth color\n        vec3 col =  texture( iChannel0, uv ).xyz;\n\t#else\n        \/\/ fetch color with correct texture gradients, to prevent discontinutity\n        vec2 uv2 = vec2( uv.x, atan(p.y,abs(p.x))\/3.1415927 );\n        vec3 col = textureGrad( iChannel0, uv, dFdx(uv2), dFdy(uv2) ).xyz;\n\t#endif\n    \n    \/\/ darken at the center    \n    col = col*r;\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}]
