[{"ver":"0.1","info":{"id":"XsVGz3","date":"1455681619","viewed":17978,"name":"Sky001 ","username":"candycat","description":"first try to render the sky.","likes":114,"published":1,"flags":0,"tags":[]},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"\/media\/a\/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"\/media\/ap\/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MIN_HEIGHT 2.0\n#define MAX_HEIGHT 4.5\n#define WIND vec2(0.2, 0.1)\n\nvec3 sundir = normalize(vec3(1.0,0.75,1.0));\n\nfloat noise( in vec3 x )\n{\n    vec3 f = fract(x);\n    vec3 p = floor(x);\n    f = f * f * (3.0 - 2.0 * f);\n    \n    p.xz += WIND * iTime;\n    vec2 uv = (p.xz + vec2(37.0, 17.0) * p.y) + f.xz;\n    vec2 rg = texture(iChannel0, (uv + 0.5)\/256.0, 0.0).yx;\n    return mix(rg.x, rg.y, f.y);\n}\n\nfloat fractal_noise(vec3 p)\n{\n    float f = 0.0;\n    \/\/ add animation\n    \/\/p = p - vec3(1.0, 1.0, 0.0) * iTime * 0.1;\n    p = p * 3.0;\n    f += 0.50000 * noise(p); p = 2.0 * p;\n\tf += 0.25000 * noise(p); p = 2.0 * p;\n\tf += 0.12500 * noise(p); p = 2.0 * p;\n\tf += 0.06250 * noise(p); p = 2.0 * p;\n    f += 0.03125 * noise(p);\n    \n    return f;\n}\n\nfloat density(vec3 pos)\n{    \n    float den = 3.0 * fractal_noise(pos * 0.3) - 2.0 + (pos.y - MIN_HEIGHT);\n    float edge = 1.0 - smoothstep(MIN_HEIGHT, MAX_HEIGHT, pos.y);\n    edge *= edge;\n    den *= edge;\n    den = clamp(den, 0.0, 1.0);\n    \n    return den;\n}\n\nvec3 raymarching(vec3 ro, vec3 rd, float t, vec3 backCol)\n{   \n    vec4 sum = vec4(0.0);\n    vec3 pos = ro + rd * t;\n    for (int i = 0; i < 40; i++) {\n        if (sum.a > 0.99 || \n            pos.y < (MIN_HEIGHT-1.0) || \n            pos.y > (MAX_HEIGHT+1.0)) break;\n        \n        float den = density(pos);\n        \n        if (den > 0.01) {\n            float dif = clamp((den - density(pos+0.3*sundir))\/0.6, 0.0, 1.0);\n\n            vec3 lin = vec3(0.65,0.7,0.75)*1.5 + vec3(1.0, 0.6, 0.3)*dif;        \n            vec4 col = vec4( mix( vec3(1.0,0.95,0.8)*1.1, vec3(0.35,0.4,0.45), den), den);\n            col.rgb *= lin;\n\n            \/\/ front to back blending    \n            col.a *= 0.5;\n            col.rgb *= col.a;\n\n            sum = sum + col*(1.0 - sum.a); \n        }\n        \n        t += max(0.05, 0.02 * t);\n        pos = ro + rd * t;\n    }\n    \n    sum = clamp(sum, 0.0, 1.0);\n    \n    float h = rd.y;\n    sum.rgb = mix(sum.rgb, backCol, exp(-20.*h*h) );\n    \n    return mix(backCol, sum.xyz, sum.a);\n}\n\nfloat planeIntersect( vec3 ro, vec3 rd, float plane)\n{\n    float h = plane - ro.y;\n    return h\/rd.y;\n}\n\nmat3 setCamera(vec3 ro, vec3 ta, float cr)\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) \/ iResolution.yy;\n    vec2 mo = vec2(0.0);\n    if (iMouse.z > 0.0) \n    {\n        mo += (2.0 * iMouse.xy - iResolution.xy) \/ iResolution.yy;\n    }\n    \n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    \n    \/\/ Rotate the camera\n    vec3 target = vec3(ro.x+10., 1.0+mo.y*3.0, ro.z);\n    \n    vec2 cossin = vec2(cos(mo.x), sin(mo.x));\n    mat3 rot = mat3(cossin.x, 0.0, -cossin.y,\n                   \t0.0, 1.0, 0.0,\n                   \tcossin.y, 0.0, cossin.x);\n    target = rot * (target - ro) + ro;\n    \n    \/\/ Compute the ray\n    vec3 rd = setCamera(ro, target, 0.0) * normalize(vec3(p.xy, 1.5));\n    \n    float dist = planeIntersect(ro, rd, MIN_HEIGHT);\n    \n    float sun = clamp(dot(sundir, rd), 0.0, 1.0);\n\tvec3 col = mix(vec3(0.78,0.78,0.7), vec3(0.3,0.4,0.5), p.y * 0.5 + 0.5);\n\tcol += 0.5*vec3(1.0,0.5,0.1)*pow(sun, 8.0);\n    \n    if (dist > 0.0) {\n        col = raymarching(ro, rd, dist, col);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}]