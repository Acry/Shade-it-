[{"ver":"0.1","info":{"id":"4dKfDV","date":"1530592670","viewed":74,"name":"FootTorus","username":"iq","description":"Torus and hexagons","likes":5,"published":3,"flags":0,"tags":[]},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\/\/ The MIT License\n\/\/ Copyright \u00a9 2018 Inigo Quilez\n\/\/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define AA 4   \/\/ make this 1 is your machine is too slow\n\n\n\/\/------------------------------------------------------------------\n\nconst vec2 torus = vec2(0.5,0.2);\n\nfloat map( in vec3 p )\n{\n    return length( vec2(length(p.xz)-torus.x,p.y) )-torus.y;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    \/\/ plane\n    float tmax = (-0.25-ro.y)\/rd.y;\n   \n    \/\/ torus\n    float t = 1.0;\n    float m = 2.0;\n    for( int i=0; i<100; i++ )\n    {\n\t    float precis = 0.0004*t;\n\t    float res = map( ro+rd*t );\n        if( res<precis || t>tmax ) break;\n        t += res;\n    }\n\n    if( t>tmax ) { t=tmax; m=1.0; }\n    return vec2( t, m );\n}\n\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<12; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res,18.0*h\/t );\n        t += clamp( h, 0.05, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nfloat checkers_pattern( in vec2 p ) \/\/ http:\/\/iquilezles.org\/www\/articles\/checkerfiltering\/checkerfiltering.htm\n{\n    \/\/ filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    \/\/ analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))\/w;\n    \/\/ xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 hexagon_pattern( vec2 p ) \n{\n\tvec2 q = vec2( p.x*2.0*0.5773503, p.y + p.x*0.5773503 );\n\t\n\tvec2 pi = floor(q);\n\tvec2 pf = fract(q);\n\n\tfloat v = mod(pi.x + pi.y, 3.0);\n\n\tfloat ca = step(1.0,v);\n\tfloat cb = step(2.0,v);\n\tvec2  ma = step(pf.xy,pf.yx);\n\t\n\treturn vec3( pi + ca - cb*ma, dot( ma, 1.0-pf.yx + ca*(pf.x+pf.y-1.0) + cb*(pf.yx-2.0*pf.xy) ) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) + rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = vec3(0.0,1.0,0.0);\n        \n        if( m<1.5 ) \/\/ plane\n        {\n            float f = checkers_pattern( 2.0*pos.xz );\n            col = 0.3 + f*vec3(0.1);\n            col *= smoothstep(0.0,0.42, abs(length(pos.xz)-torus.x) );\n        }\n        else \/\/ torus\n        {\n            nor = calcNormal( pos );\n            \n            vec2 uv = vec2( atan(pos.z, -pos.x), atan(length(pos.xz)-torus.x,pos.y) )*\n                      vec2(12.0*sqrt(3.0), 8.0)\/3.14159;\n            uv.y += iTime;\n            vec3 h = hexagon_pattern( uv );\n            \n            \/\/ cell color\n            col = vec3( mod(h.x+2.0*h.y,3.0)\/2.0 );\n            \/\/ cell borders\n            col *= smoothstep(0.02,0.04,h.z);\n        }\n\n        \/\/ lighting        \n        vec3 ref = reflect( rd, nor );\n        float occ = (0.5+0.5*nor.y);\n\t\tvec3  lig = normalize( vec3(0.4, 0.5, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),32.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.630*dif*vec3(1.1,0.90,0.55);\n        lin += 0.50*amb*vec3(0.30,0.60,1.50)*occ;\n        lin += 0.30*bac*vec3(0.40,0.30,0.25)*occ;\n\t\tcol = col*lin;\n\t\tcol += 6.00*spe*vec3(1.15,0.90,0.70);\n    }\n\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy\/iResolution.xy;\n\n    \n    vec3 tot = vec3(0.0);\n\t#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        \/\/ pixel coordinates\n        vec2 o = vec2(float(m),float(n)) \/ float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))\/iResolution.y;\n\t\t#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)\/iResolution.y;\n\t\t#endif\n\n\t\t\/\/ camera\t\n        vec3 ro = vec3( 1.3*cos(0.05*iTime + 6.0*mo.x), 1.1, 1.3*sin(0.05*iTime + 6.0*mo.x) );\n        vec3 ta = vec3( 0.0, -0.2, 0.0 );\n        \/\/ camera-to-world transformation\n        vec3 cw = normalize(ta-ro);\n\t\tvec3 cu = normalize( cross(cw,vec3(0.0, 1.0,0.0)) );\n\t\tvec3 cv = normalize( cross(cu,cw) );\n        \/\/ ray direction\n        vec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n        \/\/ render\t\n        vec3 col = render( ro, rd );\n\n\t\t\/\/ gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n\t#if AA>1\n    }\n    tot \/= float(AA*AA);\n\t#endif\n\n \n    \/\/ grading\n    tot = pow(tot,vec3(0.8,0.9,1.0) );\n    \/\/ vignetting\n    vec2 q = fragCoord\/iResolution.xy;\n    tot *= 0.3 + 0.7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.25);\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}]