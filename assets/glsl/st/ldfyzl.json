[{"ver":"0.1","info":{"id":"ldfyzl","date":"1489383273","viewed":34330,"name":"Rainier mood","username":"Zavie","description":"Improving upon https:\/\/www.shadertoy.com\/view\/XslcWn by avoiding using pixel derivatives (which are shared by 2x2 blocs, thus give an aliased look).\nTo do: fix a glitch between tiles.\n\nClick and drag to change scale.","likes":51,"published":3,"flags":0,"tags":[]},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"\/media\/a\/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"\/media\/ap\/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\/*\n\nA quick experiment with rain drop ripples.\n\nThis effect was written for and used in the launch scene of the\n64kB intro \"H - Immersion\", by Ctrl-Alt-Test.\n\n > http:\/\/www.ctrl-alt-test.fr\/productions\/h-immersion\/\n > https:\/\/www.youtube.com\/watch?v=27PN1SsXbjM\n\n-- \nZavie \/ Ctrl-Alt-Test\n\n*\/\n\n\/\/ Maximum number of cells a ripple can cross.\n#define MAX_RADIUS 2\n\n\/\/ Set to 1 to hash twice. Slower, but less patterns.\n#define DOUBLE_HASH 0\n\n\/\/ Hash functions shamefully stolen from:\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float resolution = 10. * exp2(-3.*iMouse.x\/iResolution.x);\n\tvec2 uv = fragCoord.xy \/ iResolution.y * resolution;\n    vec2 p0 = floor(uv);\n\n    vec2 circles = vec2(0.);\n    for (int j = -MAX_RADIUS; j <= MAX_RADIUS; ++j)\n    {\n        for (int i = -MAX_RADIUS; i <= MAX_RADIUS; ++i)\n        {\n\t\t\tvec2 pi = p0 + vec2(i, j);\n            #if DOUBLE_HASH\n            vec2 hsh = hash22(pi);\n            #else\n            vec2 hsh = pi;\n            #endif\n            vec2 p = pi + hash22(hsh);\n\n            float t = fract(0.3*iTime + hash12(hsh));\n            vec2 v = p - uv;\n            float d = length(v) - (float(MAX_RADIUS) + 1.)*t;\n\n            float h = 1e-3;\n            float d1 = d - h;\n            float d2 = d + h;\n            float p1 = sin(31.*d1) * smoothstep(-0.6, -0.3, d1) * smoothstep(0., -0.3, d1);\n            float p2 = sin(31.*d2) * smoothstep(-0.6, -0.3, d2) * smoothstep(0., -0.3, d2);\n            circles += 0.5 * normalize(v) * ((p2 - p1) \/ (2. * h) * (1. - t) * (1. - t));\n        }\n    }\n    circles \/= float((MAX_RADIUS*2+1)*(MAX_RADIUS*2+1));\n\n    float intensity = mix(0.01, 0.15, smoothstep(0.1, 0.6, abs(fract(0.05*iTime + 0.5)*2.-1.)));\n    vec3 n = vec3(circles, sqrt(1. - dot(circles, circles)));\n    vec3 color = texture(iChannel0, uv\/resolution - intensity*n.xy).rgb + 5.*pow(clamp(dot(n, normalize(vec3(1., 0.7, 0.5))), 0., 1.), 6.);\n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}]